syntax = "proto3";

package thales.cpl.kms.istio.v1;

option go_package = "github.com/thalescpl-io/k8s-kms-plugin-apis/istio/v1;istio";

import "google/protobuf/timestamp.proto";
import "istio/v1/messages.proto";

service KeyManagementService {
  // GenerateKEK returns the KID of the GeneratedKEK if allowed/successful
  rpc GenerateKEK(GenerateKEKRequest) returns (GenerateKEKResponse);
  // GenerateDEK returns a wrapped (by HSM handled KEK)
  rpc GenerateDEK(GenerateDEKRequest) returns (GenerateDEKResponse);
  // GenerateSKey returns a wrapped (by provided encrypted DEK ), for later use during loading and signing key generation
  rpc GenerateSKey(GenerateSKeyRequest) returns (GenerateSKeyResponse);
  // LoadSKey returns the SKey unwrapped for the controller to use for CA work...
  rpc LoadSKey(LoadSKeyRequest) returns (LoadSKeyResponse);
  // AuthenticatedEncrypt returns a payload protect by AEAD (Authenticated Encryption with Associated Data) AES-GCM with 256-bit
  rpc AuthenticatedEncrypt(AuthenticatedEncryptRequest) returns (AuthenticatedEncryptResponse);
  // AuthenticatedDecrypt returns a payload decrypted from the previously invoke AE
  rpc AuthenticatedDecrypt(AuthenticatedDecryptRequest) returns (AuthenticatedDecryptResponse);
  // ImportCACert imports the supplied CA Cert as the Offline Root CA Cert Chain
  rpc ImportCACert(ImportCACertRequest) returns (ImportCACertResponse);
  // VerifyCertChain returns a boolean indicating successful verification of a certificate chain (currently needs to be self-contained)
  rpc VerifyCertChain(VerifyCertChainRequest) returns (VerifyCertChainResponse);
}
