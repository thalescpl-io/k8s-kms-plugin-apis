//
//Copyright 2018 The Kubernetes Authors.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//

syntax = "proto3";

package thales.cpl.kms.istio.v1;

option go_package = "github.com/thalescpl-io/k8s-kms-plugin-apis/istio/v1;istio";

import "google/protobuf/timestamp.proto";
import "protoc-gen-swagger/options/annotations.proto";

enum KeyKind {
  UNKNOWN = 0;
  AES = 1;
  RSA = 2;
  ECC = 3;
}

enum Curve {
  UNSUPPORTED = 0;
  ED25519 = 1;
}

message GenerateKEKRequest {
  // optional kid, otherwise will be autogenerated as a UUID.v4 in the response
  bytes kek_kid = 1;
}

message GenerateKEKResponse {
  // KEK kid
  bytes kek_kid = 1;
}

message GenerateDEKRequest {
  // Wrapping/Encrypting KEK ID
  bytes kek_kid = 1;
}

message GenerateDEKResponse {
  // Encrypted key blob
  bytes encrypted_dek_blob = 1;
}

message GenerateSKeyRequest {
  // key size in bits
  int64 size = 1; // Only supports sizes 2048, 4096 for RSA keys... and
  // What kind of key is it... only Asymmetric kinds will be supported
  KeyKind kind = 2;
  // Curves
  Curve curve = 3;
  // Parent KID of the KEK
  bytes kek_kid = 4;
  // Encrypted blob of DEK
  bytes encrypted_dek_blob = 5;
}

message GenerateSKeyResponse {
  // Encrypted blob of SKey encrypted by DEK
  bytes encrypted_skey_blob = 1;
}

message LoadSKeyRequest {
  // KEK
  bytes kek_kid = 1;
  // Encrypted blob of DEK
  bytes encrypted_dek_blob = 2;
  // Encrypted blob of SKey
  bytes encrypted_skey_blob = 3;
}

message LoadSKeyResponse {
  // Intermediate CA Signing KeyPair in plaintext in PEM Format
  bytes plaintext_skey = 1;
}

// AuthenticatedEncryptRequest
message AuthenticatedEncryptRequest {
  bytes kek_kid = 1; // Generated out of band or via GenerateKEK
  bytes encrypted_dek_blob = 2; // Encrypted DEK payload wrapped by the KEK
  bytes plaintext = 3;
  bytes aad = 4;
}

// AuthenticatedEncryptResponse
message AuthenticatedEncryptResponse {
  bytes ciphertext = 1;
}

// AuthenticatedDecryptRequest
message AuthenticatedDecryptRequest {
  bytes kek_kid = 1;
  bytes encrypted_dek_blob = 2;
  bytes ciphertext = 3;
  bytes aad = 4;
}

// AuthenticatedDecryptResponse
message AuthenticatedDecryptResponse {
  bytes plaintext = 1;
}

// ImportCACertRequest
message ImportCACertRequest {
  bytes ca_id = 1;
  bytes ca_cert_blob = 2;
}

// ImportCACertResponse
message ImportCACertResponse {
  bool success = 1;
}

// VerifyCertChainRequest
message VerifyCertChainRequest {
  repeated bytes certificates = 1;
}

// VerifyCertChainResponse
message VerifyCertChainResponse {
  bool successful_verification = 1;
}
