// Code generated by protoc-gen-go. DO NOT EDIT.
// source: simplekms/v1/service.proto

package simplekms

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("simplekms/v1/service.proto", fileDescriptor_56ae69c7fbeef466) }

var fileDescriptor_56ae69c7fbeef466 = []byte{
	// 305 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0x4d, 0x4b, 0xc3, 0x40,
	0x10, 0x86, 0x6f, 0x2d, 0xae, 0x17, 0xd9, 0x63, 0xfa, 0x13, 0x34, 0xbb, 0x56, 0x2f, 0x82, 0x27,
	0xfb, 0x81, 0x87, 0x20, 0x48, 0x03, 0x1e, 0xbc, 0xa5, 0xe9, 0x90, 0xae, 0xc9, 0x66, 0xd7, 0xcc,
	0x26, 0xe0, 0x6f, 0xf7, 0x22, 0xcd, 0xb7, 0x14, 0xe2, 0x78, 0xcc, 0xf0, 0xbc, 0xf3, 0x90, 0xe4,
	0x1d, 0xe6, 0xa1, 0xd2, 0x36, 0x83, 0x54, 0xa3, 0xac, 0x96, 0x12, 0xa1, 0xa8, 0x54, 0x0c, 0xc2,
	0x16, 0xc6, 0x19, 0xbe, 0x70, 0xc7, 0x28, 0x03, 0x14, 0xb1, 0xcd, 0x44, 0xaa, 0x51, 0xf4, 0xa8,
	0xa8, 0x96, 0xde, 0xe2, 0x57, 0x50, 0x03, 0x62, 0x94, 0x00, 0x36, 0xc9, 0xbb, 0xef, 0x19, 0xbb,
	0x0a, 0x5e, 0xc2, 0xd7, 0xac, 0x4c, 0x54, 0x1e, 0x36, 0x4b, 0xf9, 0x81, 0xcd, 0xdf, 0xa0, 0x40,
	0x65, 0x72, 0x7e, 0x2d, 0x26, 0x56, 0x8b, 0x96, 0xda, 0xc1, 0x67, 0x09, 0xe8, 0xbc, 0x1b, 0x1a,
	0x8c, 0xd6, 0xe4, 0x08, 0xdc, 0xb2, 0xcb, 0x67, 0xc8, 0xa1, 0x88, 0x1c, 0xac, 0x9f, 0x02, 0x2e,
	0x27, 0xc3, 0x23, 0xb2, 0xb3, 0xdd, 0xd2, 0x03, 0xad, 0x51, 0x33, 0x36, 0x8c, 0xb9, 0x20, 0xe6,
	0x3b, 0x9f, 0x24, 0xf3, 0x83, 0x6e, 0x03, 0xe8, 0x0a, 0xf3, 0x75, 0x7a, 0xbf, 0x69, 0xdd, 0x00,
	0xd2, 0x74, 0x63, 0xbe, 0xd5, 0x7d, 0xb0, 0x8b, 0x7e, 0xca, 0x7d, 0x5a, 0xba, 0x93, 0x09, 0x2a,
	0xde, 0xba, 0x0e, 0x6c, 0x1e, 0xaa, 0x24, 0x5f, 0x87, 0xbb, 0x3f, 0x1a, 0xd2, 0x52, 0xb4, 0x86,
	0xf4, 0xf0, 0x79, 0x43, 0x82, 0x2d, 0xb5, 0x21, 0xc1, 0xf6, 0x9f, 0x0d, 0xa9, 0x03, 0x67, 0xbf,
	0xec, 0x24, 0x24, 0x7d, 0x95, 0x91, 0x4f, 0x92, 0xf9, 0x46, 0xb7, 0xda, 0xbc, 0xaf, 0x12, 0xe5,
	0x8e, 0xe5, 0x5e, 0xc4, 0x46, 0xcb, 0x26, 0x1c, 0xdb, 0xcc, 0x57, 0x46, 0xa6, 0x0f, 0xe8, 0xa7,
	0x1a, 0x7d, 0x5b, 0x5f, 0xa6, 0x1f, 0x59, 0x85, 0x72, 0x7c, 0xc8, 0x8f, 0xfd, 0xc3, 0x7e, 0x56,
	0x9f, 0xf2, 0xfd, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x90, 0x4f, 0xa1, 0xff, 0x22, 0x04, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// KMSPluginServiceClient is the client API for KMSPluginService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type KMSPluginServiceClient interface {
	// Version returns the runtime name and runtime version of the KMS provider.
	Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error)
	// GenerateCAK returns the kid, and it's public key of a new Key Pair in the PKCS11 device
	GenerateCAK(ctx context.Context, in *GenerateCAKRequest, opts ...grpc.CallOption) (*GenerateCAKResponse, error)
	// GenerateCA Certificate and store in in the PKCS11 device
	GenerateCA(ctx context.Context, in *GenerateCARequest, opts ...grpc.CallOption) (*GenerateCAResponse, error)
	// DestroyCAK in the PKCS11 device... this is NON-REVERSIBLE...
	DestroyCAK(ctx context.Context, in *DestroyCAKRequest, opts ...grpc.CallOption) (*DestroyCAKResponse, error)
	// DestroyCA in the PKCS11 device... this is NON-REVERSIBLE...
	DestroyCA(ctx context.Context, in *DestroyCARequest, opts ...grpc.CallOption) (*DestroyCAResponse, error)
	// SignCSR signs a CSR for the in inbound
	SignCSR(ctx context.Context, in *SignCSRRequest, opts ...grpc.CallOption) (*SignCSRResponse, error)
	// GenerateKEK returns the KID of the GeneratedKEK if allowed/successful
	GenerateKEK(ctx context.Context, in *GenerateKEKRequest, opts ...grpc.CallOption) (*GenerateKEKResponse, error)
	// DestroyKEK returns a success/failure to destroy the KEK... this is NON-REVERSIBLE...
	DestroyKEK(ctx context.Context, in *DestroyKEKRequest, opts ...grpc.CallOption) (*DestroyKEKResponse, error)
}

type kMSPluginServiceClient struct {
	cc *grpc.ClientConn
}

func NewKMSPluginServiceClient(cc *grpc.ClientConn) KMSPluginServiceClient {
	return &kMSPluginServiceClient{cc}
}

func (c *kMSPluginServiceClient) Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error) {
	out := new(VersionResponse)
	err := c.cc.Invoke(ctx, "/thales.cpl.kms.simplekms.v1.KMSPluginService/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kMSPluginServiceClient) GenerateCAK(ctx context.Context, in *GenerateCAKRequest, opts ...grpc.CallOption) (*GenerateCAKResponse, error) {
	out := new(GenerateCAKResponse)
	err := c.cc.Invoke(ctx, "/thales.cpl.kms.simplekms.v1.KMSPluginService/GenerateCAK", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kMSPluginServiceClient) GenerateCA(ctx context.Context, in *GenerateCARequest, opts ...grpc.CallOption) (*GenerateCAResponse, error) {
	out := new(GenerateCAResponse)
	err := c.cc.Invoke(ctx, "/thales.cpl.kms.simplekms.v1.KMSPluginService/GenerateCA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kMSPluginServiceClient) DestroyCAK(ctx context.Context, in *DestroyCAKRequest, opts ...grpc.CallOption) (*DestroyCAKResponse, error) {
	out := new(DestroyCAKResponse)
	err := c.cc.Invoke(ctx, "/thales.cpl.kms.simplekms.v1.KMSPluginService/DestroyCAK", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kMSPluginServiceClient) DestroyCA(ctx context.Context, in *DestroyCARequest, opts ...grpc.CallOption) (*DestroyCAResponse, error) {
	out := new(DestroyCAResponse)
	err := c.cc.Invoke(ctx, "/thales.cpl.kms.simplekms.v1.KMSPluginService/DestroyCA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kMSPluginServiceClient) SignCSR(ctx context.Context, in *SignCSRRequest, opts ...grpc.CallOption) (*SignCSRResponse, error) {
	out := new(SignCSRResponse)
	err := c.cc.Invoke(ctx, "/thales.cpl.kms.simplekms.v1.KMSPluginService/SignCSR", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kMSPluginServiceClient) GenerateKEK(ctx context.Context, in *GenerateKEKRequest, opts ...grpc.CallOption) (*GenerateKEKResponse, error) {
	out := new(GenerateKEKResponse)
	err := c.cc.Invoke(ctx, "/thales.cpl.kms.simplekms.v1.KMSPluginService/GenerateKEK", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kMSPluginServiceClient) DestroyKEK(ctx context.Context, in *DestroyKEKRequest, opts ...grpc.CallOption) (*DestroyKEKResponse, error) {
	out := new(DestroyKEKResponse)
	err := c.cc.Invoke(ctx, "/thales.cpl.kms.simplekms.v1.KMSPluginService/DestroyKEK", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KMSPluginServiceServer is the server API for KMSPluginService service.
type KMSPluginServiceServer interface {
	// Version returns the runtime name and runtime version of the KMS provider.
	Version(context.Context, *VersionRequest) (*VersionResponse, error)
	// GenerateCAK returns the kid, and it's public key of a new Key Pair in the PKCS11 device
	GenerateCAK(context.Context, *GenerateCAKRequest) (*GenerateCAKResponse, error)
	// GenerateCA Certificate and store in in the PKCS11 device
	GenerateCA(context.Context, *GenerateCARequest) (*GenerateCAResponse, error)
	// DestroyCAK in the PKCS11 device... this is NON-REVERSIBLE...
	DestroyCAK(context.Context, *DestroyCAKRequest) (*DestroyCAKResponse, error)
	// DestroyCA in the PKCS11 device... this is NON-REVERSIBLE...
	DestroyCA(context.Context, *DestroyCARequest) (*DestroyCAResponse, error)
	// SignCSR signs a CSR for the in inbound
	SignCSR(context.Context, *SignCSRRequest) (*SignCSRResponse, error)
	// GenerateKEK returns the KID of the GeneratedKEK if allowed/successful
	GenerateKEK(context.Context, *GenerateKEKRequest) (*GenerateKEKResponse, error)
	// DestroyKEK returns a success/failure to destroy the KEK... this is NON-REVERSIBLE...
	DestroyKEK(context.Context, *DestroyKEKRequest) (*DestroyKEKResponse, error)
}

// UnimplementedKMSPluginServiceServer can be embedded to have forward compatible implementations.
type UnimplementedKMSPluginServiceServer struct {
}

func (*UnimplementedKMSPluginServiceServer) Version(ctx context.Context, req *VersionRequest) (*VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (*UnimplementedKMSPluginServiceServer) GenerateCAK(ctx context.Context, req *GenerateCAKRequest) (*GenerateCAKResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateCAK not implemented")
}
func (*UnimplementedKMSPluginServiceServer) GenerateCA(ctx context.Context, req *GenerateCARequest) (*GenerateCAResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateCA not implemented")
}
func (*UnimplementedKMSPluginServiceServer) DestroyCAK(ctx context.Context, req *DestroyCAKRequest) (*DestroyCAKResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyCAK not implemented")
}
func (*UnimplementedKMSPluginServiceServer) DestroyCA(ctx context.Context, req *DestroyCARequest) (*DestroyCAResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyCA not implemented")
}
func (*UnimplementedKMSPluginServiceServer) SignCSR(ctx context.Context, req *SignCSRRequest) (*SignCSRResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignCSR not implemented")
}
func (*UnimplementedKMSPluginServiceServer) GenerateKEK(ctx context.Context, req *GenerateKEKRequest) (*GenerateKEKResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateKEK not implemented")
}
func (*UnimplementedKMSPluginServiceServer) DestroyKEK(ctx context.Context, req *DestroyKEKRequest) (*DestroyKEKResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyKEK not implemented")
}

func RegisterKMSPluginServiceServer(s *grpc.Server, srv KMSPluginServiceServer) {
	s.RegisterService(&_KMSPluginService_serviceDesc, srv)
}

func _KMSPluginService_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KMSPluginServiceServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thales.cpl.kms.simplekms.v1.KMSPluginService/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KMSPluginServiceServer).Version(ctx, req.(*VersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KMSPluginService_GenerateCAK_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateCAKRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KMSPluginServiceServer).GenerateCAK(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thales.cpl.kms.simplekms.v1.KMSPluginService/GenerateCAK",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KMSPluginServiceServer).GenerateCAK(ctx, req.(*GenerateCAKRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KMSPluginService_GenerateCA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateCARequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KMSPluginServiceServer).GenerateCA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thales.cpl.kms.simplekms.v1.KMSPluginService/GenerateCA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KMSPluginServiceServer).GenerateCA(ctx, req.(*GenerateCARequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KMSPluginService_DestroyCAK_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DestroyCAKRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KMSPluginServiceServer).DestroyCAK(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thales.cpl.kms.simplekms.v1.KMSPluginService/DestroyCAK",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KMSPluginServiceServer).DestroyCAK(ctx, req.(*DestroyCAKRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KMSPluginService_DestroyCA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DestroyCARequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KMSPluginServiceServer).DestroyCA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thales.cpl.kms.simplekms.v1.KMSPluginService/DestroyCA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KMSPluginServiceServer).DestroyCA(ctx, req.(*DestroyCARequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KMSPluginService_SignCSR_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignCSRRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KMSPluginServiceServer).SignCSR(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thales.cpl.kms.simplekms.v1.KMSPluginService/SignCSR",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KMSPluginServiceServer).SignCSR(ctx, req.(*SignCSRRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KMSPluginService_GenerateKEK_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateKEKRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KMSPluginServiceServer).GenerateKEK(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thales.cpl.kms.simplekms.v1.KMSPluginService/GenerateKEK",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KMSPluginServiceServer).GenerateKEK(ctx, req.(*GenerateKEKRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KMSPluginService_DestroyKEK_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DestroyKEKRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KMSPluginServiceServer).DestroyKEK(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thales.cpl.kms.simplekms.v1.KMSPluginService/DestroyKEK",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KMSPluginServiceServer).DestroyKEK(ctx, req.(*DestroyKEKRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _KMSPluginService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "thales.cpl.kms.simplekms.v1.KMSPluginService",
	HandlerType: (*KMSPluginServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _KMSPluginService_Version_Handler,
		},
		{
			MethodName: "GenerateCAK",
			Handler:    _KMSPluginService_GenerateCAK_Handler,
		},
		{
			MethodName: "GenerateCA",
			Handler:    _KMSPluginService_GenerateCA_Handler,
		},
		{
			MethodName: "DestroyCAK",
			Handler:    _KMSPluginService_DestroyCAK_Handler,
		},
		{
			MethodName: "DestroyCA",
			Handler:    _KMSPluginService_DestroyCA_Handler,
		},
		{
			MethodName: "SignCSR",
			Handler:    _KMSPluginService_SignCSR_Handler,
		},
		{
			MethodName: "GenerateKEK",
			Handler:    _KMSPluginService_GenerateKEK_Handler,
		},
		{
			MethodName: "DestroyKEK",
			Handler:    _KMSPluginService_DestroyKEK_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "simplekms/v1/service.proto",
}
