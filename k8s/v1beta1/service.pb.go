// Code generated by protoc-gen-go. DO NOT EDIT.
// source: k8s/v1beta1/service.proto

package k8s

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("k8s/v1beta1/service.proto", fileDescriptor_09e029c5036cc398) }

var fileDescriptor_09e029c5036cc398 = []byte{
	// 240 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0xd1, 0x3f, 0x4b, 0xc4, 0x30,
	0x18, 0xc7, 0x71, 0x70, 0x50, 0xe8, 0x58, 0x5c, 0xcc, 0xe2, 0xae, 0x34, 0xe1, 0x74, 0x29, 0x1c,
	0x2e, 0xa2, 0x93, 0xb8, 0x28, 0x38, 0xb8, 0x25, 0xe1, 0x31, 0x17, 0xf2, 0xd7, 0xfe, 0xd2, 0x83,
	0x7b, 0x7b, 0xbe, 0x32, 0xa1, 0x29, 0x67, 0x17, 0x8f, 0xce, 0xf9, 0x3e, 0xf9, 0x0c, 0xbf, 0xe6,
	0xca, 0xf5, 0x10, 0xfb, 0x8d, 0xa2, 0x22, 0x37, 0x02, 0x34, 0xec, 0xad, 0x26, 0x9e, 0x87, 0x54,
	0x52, 0xcb, 0xca, 0x4e, 0x7a, 0x02, 0xd7, 0xd9, 0x73, 0x17, 0xc0, 0x5d, 0x0f, 0x3e, 0x97, 0xec,
	0xda, 0xa4, 0x64, 0x3c, 0x89, 0xa9, 0x54, 0xe3, 0x97, 0x28, 0x36, 0x10, 0x8a, 0x0c, 0xb9, 0x1e,
	0x33, 0xb6, 0xfc, 0x37, 0x10, 0x20, 0x0d, 0xa1, 0xbe, 0xdd, 0xfd, 0x9c, 0x35, 0x97, 0x2f, 0x74,
	0x78, 0x95, 0x51, 0x1a, 0x0a, 0x14, 0xcb, 0x7b, 0x75, 0x5b, 0xd5, 0x5c, 0x7c, 0xd0, 0x00, 0x9b,
	0x62, 0x7b, 0xc3, 0xff, 0xd7, 0xf9, 0x1c, 0xbd, 0xd1, 0xf7, 0x48, 0x28, 0xec, 0x76, 0x55, 0x8b,
	0x9c, 0x22, 0x26, 0xe3, 0x89, 0xf4, 0x70, 0xc8, 0xe5, 0xb4, 0x31, 0x47, 0xab, 0x8c, 0x63, 0xfb,
	0x67, 0x3c, 0xc7, 0x15, 0xc6, 0x1c, 0xad, 0x32, 0x8e, 0x6d, 0x35, 0x1e, 0x1f, 0x3e, 0xb7, 0xc6,
	0x96, 0xdd, 0xa8, 0xb8, 0x4e, 0x41, 0xd4, 0x43, 0x9d, 0x7d, 0x67, 0x93, 0x70, 0x3d, 0x3a, 0x17,
	0xd0, 0x65, 0x3f, 0x1a, 0x1b, 0x3b, 0x99, 0x2d, 0xc4, 0x62, 0x8e, 0xad, 0xeb, 0xa1, 0xce, 0xa7,
	0x29, 0xee, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x09, 0xcb, 0x25, 0x3c, 0x00, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// KeyManagementServiceClient is the client API for KeyManagementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type KeyManagementServiceClient interface {
	// Version returns the runtime name and runtime version of the KMS provider.
	Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error)
	// Execute decryption operation in KMS provider.
	Decrypt(ctx context.Context, in *DecryptRequest, opts ...grpc.CallOption) (*DecryptResponse, error)
	// Execute encryption operation in KMS provider.
	Encrypt(ctx context.Context, in *EncryptRequest, opts ...grpc.CallOption) (*EncryptResponse, error)
}

type keyManagementServiceClient struct {
	cc *grpc.ClientConn
}

func NewKeyManagementServiceClient(cc *grpc.ClientConn) KeyManagementServiceClient {
	return &keyManagementServiceClient{cc}
}

func (c *keyManagementServiceClient) Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error) {
	out := new(VersionResponse)
	err := c.cc.Invoke(ctx, "/thales.cpl.kms.k8s.v1beta1.KeyManagementService/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyManagementServiceClient) Decrypt(ctx context.Context, in *DecryptRequest, opts ...grpc.CallOption) (*DecryptResponse, error) {
	out := new(DecryptResponse)
	err := c.cc.Invoke(ctx, "/thales.cpl.kms.k8s.v1beta1.KeyManagementService/Decrypt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyManagementServiceClient) Encrypt(ctx context.Context, in *EncryptRequest, opts ...grpc.CallOption) (*EncryptResponse, error) {
	out := new(EncryptResponse)
	err := c.cc.Invoke(ctx, "/thales.cpl.kms.k8s.v1beta1.KeyManagementService/Encrypt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeyManagementServiceServer is the server API for KeyManagementService service.
type KeyManagementServiceServer interface {
	// Version returns the runtime name and runtime version of the KMS provider.
	Version(context.Context, *VersionRequest) (*VersionResponse, error)
	// Execute decryption operation in KMS provider.
	Decrypt(context.Context, *DecryptRequest) (*DecryptResponse, error)
	// Execute encryption operation in KMS provider.
	Encrypt(context.Context, *EncryptRequest) (*EncryptResponse, error)
}

// UnimplementedKeyManagementServiceServer can be embedded to have forward compatible implementations.
type UnimplementedKeyManagementServiceServer struct {
}

func (*UnimplementedKeyManagementServiceServer) Version(ctx context.Context, req *VersionRequest) (*VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (*UnimplementedKeyManagementServiceServer) Decrypt(ctx context.Context, req *DecryptRequest) (*DecryptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Decrypt not implemented")
}
func (*UnimplementedKeyManagementServiceServer) Encrypt(ctx context.Context, req *EncryptRequest) (*EncryptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Encrypt not implemented")
}

func RegisterKeyManagementServiceServer(s *grpc.Server, srv KeyManagementServiceServer) {
	s.RegisterService(&_KeyManagementService_serviceDesc, srv)
}

func _KeyManagementService_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyManagementServiceServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thales.cpl.kms.k8s.v1beta1.KeyManagementService/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyManagementServiceServer).Version(ctx, req.(*VersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyManagementService_Decrypt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecryptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyManagementServiceServer).Decrypt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thales.cpl.kms.k8s.v1beta1.KeyManagementService/Decrypt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyManagementServiceServer).Decrypt(ctx, req.(*DecryptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyManagementService_Encrypt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncryptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyManagementServiceServer).Encrypt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thales.cpl.kms.k8s.v1beta1.KeyManagementService/Encrypt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyManagementServiceServer).Encrypt(ctx, req.(*EncryptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _KeyManagementService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "thales.cpl.kms.k8s.v1beta1.KeyManagementService",
	HandlerType: (*KeyManagementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _KeyManagementService_Version_Handler,
		},
		{
			MethodName: "Decrypt",
			Handler:    _KeyManagementService_Decrypt_Handler,
		},
		{
			MethodName: "Encrypt",
			Handler:    _KeyManagementService_Encrypt_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "k8s/v1beta1/service.proto",
}
